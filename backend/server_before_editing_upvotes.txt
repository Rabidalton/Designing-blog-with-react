/*
//Import Express
import express from 'express';
import { MongoClient } from 'mongodb'

//Temporary Express database for storing upvotes 
let articlesInfo = [{
    name: 'learn-react',
    upvotes: 0,
    comments: [],
}, {
    name: 'learn-node',
    upvotes: 0,
    comments: [],
}, {
    name: 'mongodb',
    upvotes: 0,
    comments: [],
}]

//Create the express App object or container for the app. 
const app = express();
app.use(express.json());

//Endpoint to display info from the DB.
app.get('/api/articles/:name', async (req, res) => { //configure the get asynchronous request
    const { name } = req.params; //Get the url parameter

    const client = new MongoClient('mongodb://127.0.0.1:27017'); //Specifies the name of the db server
    await client.connect(); //Waits for the server, acting as client to the db server, to connect 

    const db = client.db('blog-db'); //Specifies the database name.

    //Looks for the article collection and find the article by it's name.
    const article = await db.collection('articles').findOne({ name }); 

    if (article) {
        res.json(article); //respond with a json object.
    } else {
        res.sendStatus(404);
    }
    
});

//Develop code for upvoting article
app.put('/api/articles/:name/upvote', (req, res) => {
    const { name } = req.params; //Find the name of the article
    const article = articlesInfo.find(a => a.name === name); //Finds the article of the corresponding name

    if (article) { //validates the article's existence.
        article.upvotes += 1; //Increases the upvotes
        res.send(`The ${name} article has ${article.upvotes} upvotes`); //Send by the response
    } else {
        res.send('That article doesn\'t exist'); //Send this response if there's an error.
    }
});

//Adding comments
app.post('/api/articles/:name/comments', (req, res) => {
    const { name } = req.params; //Receives the name of the article as a request
    const { postedBy, text } = req.body; //Receives the comment and the commentor as a request

    const article = articlesInfo.find(a => a.name === name); //Finds the corresponding article of the name

    if (article) { //If the article exists,
        article.comments.push({ postedBy, text }); //Push the comment to the comments array.
        res.send(article.comments);
    } else {
        res.send('That article doesn\'t exist!'); //Throw this error if it doesn't exist.
    }
});

Tell the server to listen
Specify which port to listen on.
It takes two arguments: port number and a callback

app.listen(8000, () => {
    console.log('Server is listening on port 8000');
});

*/